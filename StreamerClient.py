import asyncio
import websockets
import json
import pyaudio
import numpy as np
import threading
import queue


class StreamerClient:

    def __init__(self, server_url="ws://localhost:8765"):
        self.server_url = server_url
        self.websocket = None
        self.audio_queue = queue.Queue()
        self.is_recording = False
        self.is_running = True

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.websocket = await websockets.connect(self.server_url)
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ AI-—Å—Ç—Ä–∏–º–µ—Ä—É!")
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def send_text_message(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.websocket:
            print("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        message = {
            "type": "text",
            "content": text,
            "timestamp": asyncio.get_event_loop().time()
        }

        await self.websocket.send(json.dumps(message))
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")

    async def send_audio_message(self, audio_data: np.ndarray):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.websocket:
            print("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        message = {
            "type": "audio",
            "content": audio_data.tolist(),
            "timestamp": asyncio.get_event_loop().time()
        }

        await self.websocket.send(json.dumps(message))
        print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    async def listen_for_responses(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            while self.is_running and self.websocket:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º recv() —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤–º–µ—Å—Ç–æ async for
                    message = await asyncio.wait_for(
                        self.websocket.recv(),
                        timeout=
                        0.1  # –ù–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —á—Ç–µ–Ω–∏—è
                    )
                    data = json.loads(message)
                    await self.handle_response(data)

                except asyncio.TimeoutError:
                    # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    continue
                except websockets.exceptions.ConnectionClosed:
                    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                    break
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
                    continue

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

    async def handle_response(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞"""
        if data["type"] == "response":
            print(f"\nüéôÔ∏è –°—Ç—Ä–∏–º–µ—Ä: {data['text']}")
            print(f"üòä –≠–º–æ—Ü–∏—è: {data['emotion']}")

            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if "audio" in data:
                audio_data = np.array(data["audio"], dtype=np.float32)
                self.play_audio(audio_data)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Live2D –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if "live2d_params" in data:
                print(f"üé≠ Live2D: {data['live2d_params']}")

        elif data["type"] == "transcription":
            print(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {data['text']}")

        else:
            print(f"–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {data}")

    def play_audio(self, audio_data: np.ndarray):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ"""
        try:
            p = pyaudio.PyAudio()
            stream = p.open(format=pyaudio.paFloat32,
                            channels=1,
                            rate=22050,
                            output=True)
            stream.write(audio_data.tobytes())
            stream.stop_stream()
            stream.close()
            p.terminate()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")

    def start_voice_recording(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞"""
        self.is_recording = True
        threading.Thread(target=self._record_audio, daemon=True).start()

    def stop_voice_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞"""
        self.is_recording = False

    def _record_audio(self):
        """–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        p = pyaudio.PyAudio()
        stream = p.open(format=pyaudio.paFloat32,
                        channels=1,
                        rate=22050,
                        input=True,
                        frames_per_buffer=1024)

        print("üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...")
        frames = []

        while self.is_recording:
            data = stream.read(1024)
            frames.append(np.frombuffer(data, dtype=np.float32))

        stream.stop_stream()
        stream.close()
        p.terminate()

        if frames:
            audio_data = np.concatenate(frames)
            self.audio_queue.put(audio_data)
            print("üé§ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def get_user_input(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, input, "\n–í—ã: ")

    async def interactive_chat(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å —Å—Ç—Ä–∏–º–µ—Ä–æ–º"""
        print("\n=== AI –°—Ç—Ä–∏–º–µ—Ä –ß–∞—Ç ===")
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  /voice - –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("  /quit - –≤—ã—Ö–æ–¥")
        print("  –õ—é–±–æ–π —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("========================\n")

        while self.is_running:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º executor –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞
                user_input = await self.get_user_input()
                user_input = user_input.strip()

                if user_input == "/quit":
                    self.is_running = False
                    break
                elif user_input == "/voice":
                    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏...")
                    await self.get_user_input()
                    self.start_voice_recording()

                    print("–ì–æ–≤–æ—Ä–∏—Ç–µ... (Enter –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
                    await self.get_user_input()
                    self.stop_voice_recording()

                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
                    await asyncio.sleep(0.5)

                    if not self.audio_queue.empty():
                        audio_data = self.audio_queue.get()
                        await self.send_audio_message(audio_data)

                elif user_input:
                    await self.send_text_message(user_input)

            except KeyboardInterrupt:
                self.is_running = False
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        if not await self.connect():
            return

        try:
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ–Ω–µ
            listen_task = asyncio.create_task(self.listen_for_responses())

            # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
            await self.interactive_chat()

            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            self.is_running = False
            listen_task.cancel()

            try:
                await listen_task
            except asyncio.CancelledError:
                pass

        except KeyboardInterrupt:
            print("\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ...")
            self.is_running = False

        finally:
            if self.websocket:
                await self.websocket.close()
            print("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞")


# –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class SimpleClient:

    def __init__(self, server_url="ws://localhost:8765"):
        self.server_url = server_url

    async def send_message(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        async with websockets.connect(self.server_url) as websocket:
            message = {
                "type": "text",
                "content": text,
                "timestamp": asyncio.get_event_loop().time()
            }

            await websocket.send(json.dumps(message))

            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = await websocket.recv()
            data = json.loads(response)

            if data["type"] == "response":
                print(f"–°—Ç—Ä–∏–º–µ—Ä: {data['text']}")
                print(f"–≠–º–æ—Ü–∏—è: {data['emotion']}")
                return data

    async def quick_test(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç"""
        messages = [
            "–ê—Ä–ª–µ–∫–∏–Ω–∞, –ª—é–±–∏—à—å —Å–æ—Å–∏—Å–∫–∏?", "–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É", "–ë–∞–Ω–∞–Ω –∏–ª–∏ –æ–≥—É—Ä–µ—Ü?"
            # "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏"
        ]

        for msg in messages:
            print(f"\n–í—ã: {msg}")
            try:
                await self.send_message(msg)
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")


# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
async def main():
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç")
    print("2. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")

    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()

    if choice == "1":
        client = StreamerClient()
        await client.run()
    elif choice == "2":
        client = SimpleClient()
        await client.quick_test()
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    asyncio.run(main())
